演算子・・・・・・「+」や「＝」
オペランド・・・・「b = a + 3」の「a」や「3」等

[算術演算子]
  int a = 15;
  int c;
  c = a + 3;  // c = 18
  c = a - 5;  // c = 10
  c = a * 2;  // c = 30
  c = a / 6;  // c = 2
  c = a % 4;  // c = 3

[インクリメント・デクリメント演算子]
インクリメント演算子・・数値型の数値の値に1増加する演算子
デクリメント演算子・・数値型の数値の値に1減少する演算子
　演算子：++　/　使用例：a++,++a　/　aを1増加する。
　演算子：--　/　使用例：a--,--a　/　aを1減少する。

・前置と後置
インクリメントとデクリメントには、演算子を前につける前置と後ろにつける後置がある。
どちらの場合でもインクリメント演算子は1増加させ、デクリメント演算子は1減少させることに違いはありません。
ただし、以下のような前置と後置で処理が変わってくる場合がある。
  int a;
  int c;
  a = 5;
  c = ++a;  // a をインクリメントした後に、a が c に代入される
  // それぞれの値は、a が「6」で c も「6」
  a = 5;
  c = a++;  // a を c に代入した後に、a がインクリメントされる
  // それぞれの値は、a が「6」で c が「5」

[代入演算子]
変数に値を代入したい場合や計算した結果を代入したい場合に使用する。
  演算子：= 　/　使用例：a = b　 /　aにbを代入する。
  演算子：+=　/　使用例：a += b　/　a = a + bと同じ。
  演算子：-=　/　使用例：a -= b　/　a = a - bと同じ。
  演算子：*=　/　使用例：a *= b　/　a = a * bと同じ。
  演算子：/=　/　使用例：a /= b　/　a = a / bと同じ。
  演算子：%=　/　使用例：a %= b　/　a = a % bと同じ。

[論理演算子]
複数の式を条件とする場合に使用します。結果は「boolean」型になります。
  演算子：&&(AND) 　/　使用例：a && b　 /　aとbの両方がtrueの場合にtrue。
  演算子：||(OR)  　/　使用例：a || b　 /　aまたはbがtrueの場合にtrue。
  演算子：!(NOT)  　/　使用例：!a　     /　aがfalseの場合にtrue。

[文字列の等価比較]
「==」は文字列の比較に用いることも出来る。
  String a = "applePie";
  String b = "applePie";
  c = a == b  //c = true
しかし、これには注意が必要で一般的に文字列比較をしたい際に「==」を使うのは避けます。
上記のように文字列リテラルを定義した場合は文字列の内容が一致しているとtrueを返すのですが、次のようなケースではfalseを返します。
  String a = "applePie";
  String d = "apple";
  String e = d + "Pie";
  c = a == e;  // c = false

  String a = "applePie";
  String f = new String("applePie");
  c = a == f;  // c = false

== 演算子は、参照しているオブジェクトが一致しているかをチェックします。
変数eやfは、aと中身が同じ別のオブジェクトを生成しているため、結果がfalseとなるのです。
代わりに、文字列を比較したい場合は、equalsメソッドを使いましょう。
  // 変数の中身はすぐ上の例と同じ
  c = a.equals(b);  // c = true
  c = a.equals(e);  // c = true
  c = a.equals(f);  // c = true